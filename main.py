import pandas as pd
import matplotlib.pyplot as plt
import scipy

## the data in "flu_case_data.csv" was generated by ChatGPT so that I could practice extracting data--
## cleaning data, plotting data, and analyzing it. This purely for practice. 

flu_case_data = pd.read_csv("flu_case_data.csv",sep=",",header=0)

"""The predictor (independent variable) and dependent variables can be changed to test for correlation
   between multiple points. Below is an example.
"""
allowable_variables = ["case_count", "avg_temperature", "air_pollution_index", "vaccination_rate", "humidity", "hand_sanitizer_sales"]
predictor = "humidity" ## x
dependent = "case_count" ## y

## check for unallowable variable tests
if predictor not in allowable_variables or dependent not in allowable_variables:
    print("The variables inputted cannot be compared on a numerical basis.")
    print("These variables can be compared amongst each other: ", str(allowable_variables))
    exit()

## This line converts all numbers to numeric. If errors are raised by dirty info or strings, the errors=coerce converts all missing data to NaN
## Current limitations: cannot correlate date with flu cases (because you can't correlation datetime with a float)
## and also because when you convert the case_count to a numeric value all rows
## raise errors, are replaced by NaN values, and then deleted by dropna (line 31)
flu_case_data[dependent] = pd.to_numeric(flu_case_data[dependent], errors="coerce")
flu_case_data[predictor] = pd.to_numeric(flu_case_data[predictor], errors="coerce")


flu_case_data[dependent] = flu_case_data[dependent].astype("Float64")
flu_case_data[predictor] = flu_case_data[predictor].astype("Float64")


flu_case_data["date"] = pd.to_datetime(flu_case_data["date"])

## dropna and drop_duplicates clears the data
flu_case_data.dropna(axis=0, inplace=True)
flu_case_data.drop_duplicates(inplace=True)
if flu_case_data.empty:
    print("Error: no valid data in flu_case_data. Check flu_case_data.csv")
    exit()

print(flu_case_data)

x = flu_case_data[predictor]
y = flu_case_data[dependent]

slope, intercept, r_value, p_value, std_err = scipy.stats.linregress(x,y)
r_squared = r_value ** 2

print("Slope: " + str(slope))
print("Intercept: " + str(intercept))

def myfunc(x):
    return slope*x + intercept


plt.xlabel(predictor.replace("_"," "))
plt.ylabel(dependent.replace("_"," "))

plt.scatter(x,y)
plt.plot(x, list(map(myfunc,x)))

print("Testing whether " + predictor + " influences " + dependent + ". ")
print("H0: %s does not influence %s." %(predictor,dependent))
print("P-Value: ", p_value)
print("R-Squared: ", r_squared)

if p_value < 0.05 or r_squared > .5:
    print("Threshold met. H0 rejected. HA accepted")
else:
    print("Threshold not met. H0 accepted. HA rejected.")

plt.show()


